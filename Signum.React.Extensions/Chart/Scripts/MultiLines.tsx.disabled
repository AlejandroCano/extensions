import * as React from 'react'
import * as d3 from 'd3'
import D3ChartBase from '../ChartRenderer';
import * as ChartClient from '../ChartClient';
import * as ChartUtils from '../Templates/ChartUtils';
import { getClickKeys, translate, scale, rotate, skewX, skewY, matrix, scaleFor, rule, ellipsis } from '../Templates/ChartUtils';


export default class MultiLineChart extends D3ChartBase {

    drawChart(data: ChartClient.ChartTable, chart: d3.Selection<SVGElement, {}, HTMLDivElement, unknown>, width: number, height: number) {
              
        var pivot = data.columns.c1.token == null ?  
           ChartUtils.toPivotTable(data, "c0", ["c2", "c3", "c4", "c5", "c6"]): 
           ChartUtils.groupedPivotTable(data, "c0", "c1", "c2");
      
      var xRule = rule({
        _1 : 5,
        title : 15,
        _2 : 10, 
        labels : parseInt(data.parameters["UnitMargin"]),
        _3 : 5,
        ticks: 4,
        content: '*',
        _4: 10,
      }, width);
      //xRule.debugX(chart)
      
      var yRule = rule({
        _1 : 5,
        legend : 15,
        _2 : 20,
        content: '*',
        ticks: 4,
        _3 : 5,
        labels0: 15,
        labels1: 15,
        _4 : 10,
        title: 15,
        _5 : 5,
      }, height);
      //yRule.debugY(chart);
      
      var x = d3.scaleBand()
          .domain(pivot.rows.map(d => d.rowValue.key))
          .range([0, xRule.size('content')]);
      
      var allValues = pivot.rows.flatMap(r => pivot.columns.map(function(c){ return r.values[c.key] && r.values[c.key].value; }));
      
      var y =  scaleFor(data.columns.c2, allValues, 0, yRule.size('content'), data.parameters["Scale"]);
      
      chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content')+ (x.bandwidth() / 2), yRule.start('ticks')))
        .enterData(pivot.rows, 'line', 'x-tick')
          .attr('y2',  function (d, i) { return yRule.start('labels' + (i % 2)) - yRule.start('ticks'); })
          .attr('x1', d => x(d.rowValue))
          .attr('x2', d => x(d.rowValue))
          .style('stroke', 'Black');
      
      if ((x.bandwidth() * 2) > 60) 
      {
        chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content')+ (x.bandwidth() / 2), yRule.middle('labels0')))
          .enterData(pivot.rows, 'text', 'x-label')
            .attr('x', d => x(d.rowValue))
            .attr('y', function (d, i) { return yRule.middle('labels' + (i % 2)) - yRule.middle('labels0'); })
            .attr('dominant-baseline', 'middle')
            .attr('text-anchor', 'middle')
            .text(v => v.rowValue.niceToString())
            .each(function (v) { ellipsis(this, x.bandwidth() * 2); });
      }
      
      chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
        .append('svg:text').attr('class', 'x-title')
        .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'middle')
        .text(data.columns.c0.title);
      
      var yTicks = y.ticks(10);
      var yTickFormat = y.tickFormat(height / 50);
      chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
        .enterData(yTicks, 'line', 'y-line')
        .attr('x2', xRule.size('content'))
        .attr('y1', t => -y(t))
        .attr('y2', t => -y(t))
        .style('stroke', 'LightGray');
      
      chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
        .enterData(yTicks, 'line', 'y-tick')
        .attr('x2', xRule.size('ticks'))
        .attr('y1', t => -y(t))
        .attr('y2', t => -y(t))
        .style('stroke', 'Black');
      
      chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
        .enterData(yTicks, 'text', 'y-label')
        .attr('y', t => -y(t))
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'end')
        .text(yTickFormat);
      
      chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
        .append('svg:text').attr('class', 'y-label')
        .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'middle')
        .text(pivot.title);
      
       var color = d3.scaleOrdinal(ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"])).domain(pivot.columns.map(s => s.key));
      
       var pInterpolate = data.parameters["Interpolate"];
      
      //paint graph - line
    
       chart.enterData(pivot.columns, 'g', 'shape-serie').attr('transform', translate(xRule.start('content') + x.bandwidth() / 2, yRule.end('content')))     
       .each(function(s)
        { 
           d3.select(this)
            .append('svg:path').attr('class', 'shape')
            .attr('stroke', s => s.color || color(s.key))
            .attr('fill', 'none')
            .attr('stroke-width', 3)
            .attr('shape-rendering', 'initial')
            .attr('d', function(s) { 
                  return d3.line()
                    .x(r => x(r.rowValue))
                    .y(r => -y(r.values[s.key] && r.values[s.key].value))
                    .defined(r => r.values[s.key] && r.values[s.key].value)
                    .curve(ChartUtils.getCurveByName(pInterpolate))
                    (pivot.rows);
             });
         
           //paint graph - hover area trigger
          d3.select(this).enterData(pivot.rows, 'circle', 'hover')
          .filter(r => r.values[s.key] != undefined)
          .attr('cx', function(r, i) { return x(r.rowValue); })
          .attr('cy', r => -y(r.values[s.key] && r.values[s.key].value))
          .attr('r', r => 15)
          .attr('fill', '#fff')
          .attr('fill-opacity', 0)
          .attr('stroke', 'none')
          .attr('data-click', v => getClickKeys(v.values[s.key].rowClick, data.columns))
          .append('svg:title')
          .text(v => v.values[s.key].value);     
         
          d3.select(this).enterData(pivot.rows, 'circle', 'point')
          .filter(r => r.values[s.key] != undefined)
          .attr('fill', r => s.color || color(s.key))
          .attr('r', 5)
          .attr('cx', r => x(r.rowValue))
          .attr('cy', r => -y(r.values[s.key] && r.values[s.key].value))
          .attr('data-click', v => getClickKeys(v.values[s.key].rowClick, data.columns))
          .attr('shape-rendering', 'initial')
          .append('svg:title')
          .text(v => v.values[s.key].valueTitle);   
         
          if(data.parameters["NumberOpacity"] > 0){
            //paint graph - points-labels
            d3.select(this).enterData(pivot.rows, 'text', 'point-label')
             .filter(r => r.values[s.key] != undefined)
              .attr('text-anchor', 'middle')
              .attr('opacity', data.parameters["NumberOpacity"])
              .attr('x', r => x(r.rowValue))
              .attr('y', r => -y(r.values[s.key] && r.values[s.key].value) - 8)
              .attr('data-click', v => getClickKeys(v.values[s.key].rowClick, data.columns))
              .attr('shape-rendering', 'initial')
              .text(v => v.values[s.key].value; })
       });
    
       var legendScale = d3.scaleBand()
        .domain(pivot.columns.map(function (s, i) { return i; }))
        .range([0, xRule.size('content')]);
      
      if (legendScale.bandwidth() > 50) {
        
        var legendMargin = yRule.size('legend') + 4;
        
        chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
          .enterData(pivot.columns, 'rect', 'color-rect')
          .attr('x', function (e, i) { return legendScale(i); })
          .attr('width', yRule.size('legend'))
          .attr('height', yRule.size('legend'))
          .attr('fill', s => s.color || color(s.key));
        
        chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend') + 1))
          .enterData(pivot.columns, 'text', 'color-text')
          .attr('x', function (e, i) { return legendScale(i); })
          .attr('dominant-baseline', 'middle')
          .text(s => s.niceName)
          .each(function (s) { ellipsis(this, legendScale.bandwidth() - legendMargin); });
      }
      
      chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
        .append('svg:line')
        .attr('class', 'x-axis')
        .attr('x2', xRule.size('content'))
        .style('stroke', 'Black');
      
      chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
        .append('svg:line')
        .attr('class', 'y-axis')
        .attr('y2', yRule.size('content'))
        .style('stroke', 'Black'); 
      
    }
}
