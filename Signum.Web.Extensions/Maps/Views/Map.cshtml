@using Signum.Web.Maps;
@using System.Reflection;
@using Newtonsoft.Json;
@model MapInfo
@Html.ScriptCss("~/Maps/Content/map.css")
@{ var colorProviders = (List<MapColorProvider>)ViewData["colorProviders"]; }

<div class="form-inline form-sm container" style="margin-top: 10px;">
    <div class="form-group">
        <label for="filter">Filter By</label>
        <input type="text" class="form-control" id="filter" placeholder="type or namespace">
    </div>
    <div class="form-group" style="margin-left: 10px;">
        <label for="color">Color</label>
        <select class="form-control" id="color">
            @foreach(var cp in colorProviders)
            {
                <option value="@cp.Name">@cp.NiceName</option>
            }
        </select>
    </div>
</div>

<div id="map">
    <svg id="svgMap">
        <defs>
            <pattern id="pattern-stripe" width="4" height="4" patternUnits="userSpaceOnUse" patternTransform="rotate(45)">
                <rect width="2" height="4" transform="translate(0,0)" fill="white"></rect>
            </pattern>
            <mask id="mask-stripe">
                <rect x="0" y="0" width="100%" height="100%" fill="url(#pattern-stripe)"></rect>
            </mask>  

            <marker id="normal_arrow" viewBox="0 -5 10 10" refX="10" refY="0" markerWidth="10" markerHeight="10" orient="auto">
                <path fill="gray" d="M0,0L0,-5L10,0L0,5L0,0" />
            </marker>    

            <marker id="normal_lite" viewBox="0 -5 10 10" refX="10" refY="0" markerWidth="10" markerHeight="10" orient="auto">
                <path fill="gray" d="M5,0L0,-5L10,0L0,5L5,0" />
            </marker>    

            <marker id="normal_lite" viewBox="0 -5 10 10" refX="10" refY="0" markerWidth="10" markerHeight="10" orient="auto">
                <path fill="gray" d="M0,0L0,-5L10,0L0,5L0,0L-10,5L-10,-5L0,0" />
            </marker>   
        </defs>
    </svg>
</div>
<script>
    function getProvider(name, nodes) {
        return new Promise(function (resolve) {
            switch (name) {
                @foreach (var cp in colorProviders)
                {
                    <text>case "@cp.Name": 
                    require(['@cp.GetJsProvider.Module'], function(mod) { 
                        resolve(mod.@(cp.GetJsProvider.FunctionName)(@Html.Raw(cp.GetJsProvider.Arguments.ToString(a=>a == MapClient.NodesConstant ? "nodes" : 
                                                             JsonConvert.SerializeObject(a, cp.GetJsProvider.JsonSerializerSettings),", ")))) 
                    }); break
                    </text>
                }
            }
        });
    }


    @MapClient.Module["createMap"]("map", "svgMap", "filter", "color", Model, "getProvider")
</script>