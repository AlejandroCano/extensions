@using Signum.Entities.UserQueries
@using Signum.Entities.DynamicQuery
@using Signum.Engine
@using Signum.Web.UserQueries
@using Newtonsoft.Json.Linq

@using (var e = Html.TypeContext<UserQueryCountPartEntity>())
{
    var uq = e.Value.UserQuery.Retrieve();
    object queryName = Finder.Manager.QuerySettings.Keys.FirstEx(k => QueryUtils.GetQueryUniqueKey(k) == uq.Query.Key);
    FindOptions fo = new FindOptions(queryName)
    {
        ShowFilters = false
    };

    fo.ApplyUserQuery(uq);

    var queryNiceName = QueryUtils.GetNiceName(fo.QueryName);

    <a class="@(!e.Value.ShowName ? "dashboard-tooltip" : null)" href="@fo.ToString()"
       data-toggle="tooltip" data-placement="top" data-original-title="@queryNiceName">

        @if (e.Value.IconClass.HasText())
        {
            <i class="glyphicon @e.Value.IconClass"></i>
        }

        @{
            var context = new Context(e, "{0}_cnt".FormatWith(e.Value.Id));
        }

        @if (e.Value.ShowName)
        {
            @queryNiceName
        }

        &nbsp;
        <div id="@context" class="badge"></div>

        @{
            var function = JsModule.Finder["count"](
                fo.ToJS(context.Prefix),
                new JRaw("'" + context.Prefix + "'.get()"));
        }

        @MvcHtmlString.Create("<script>" + function.ToHtmlString() + "</script>")
    </a>
}

<style type="text/css">
    div.tooltip-inner {
        max-width: none;
        white-space: nowrap;
    }
</style>

